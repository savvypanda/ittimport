<?php defined('_JEXEC') or die('Restricted access');

//import dependencies
jimport('joomla.application.component.model');

/*
 * IttImport Upload model
 *
 */
class IttImportModelUpload extends JModel {
	//protected $db;
	private $reporter;
	private $user_id;
	private $newusergroup;

	private $jusers = array();
	private $vcountries = array();
	private $vstates = array();
	private $products = array();

	private $fields = array(
		'person_id' => 'person_id',
		'first_name' => 'firstname',
		'middle_name' => 'middlename',
		'last_name' => 'lastname',
		'address1' => 'address1',
		'address2' => 'address2',
		'address3' => 'address3',
		'city' => 'city',
		'state' => 'state',
		'country' => 'country',
		'zipcode' => 'zip',
		'phone' => 'phone',
		'email' => 'email',
		'course_no' => 'course',
		'course_start_date' => 'course_start_date',
		'campuscode' => 'code',
		'cancellation' => 'cancelled',
		'order_date' => 'ordered_on'
	);

	//if desired, each field can be transformed and validated when it is imported from the file,
	//by adding private functions to the end of the file named <field>_transform and <field>_validate
	//where <field> is the VALUE in the $fields array (eg: course_transform, ordered_on_validate, etc...)
	//look at the end of the file for examples


	/*
	 * Constructor
	 */
	public function __construct($config = array()) {
		parent::__construct($config);
	}


	/*
	 * Function to set the reporter for the class
	 * Includes error handling for if the given object is not a reporter
	 * This function must be called before the upload function
	 *
	 * Input: $object: The reporter object to set in this class
	 *
	 * Returns: True on success, false on failure.
	 *
	 */
	public function setReporter(&$object) {
		if(get_class($object) == 'IttImportModelReporter') {
			$this->reporter = $object;
			return true;
		} else {
			return false;
		}
	}

	/*
	 * Upload function. This is the main point of this model
	 * The reporter must be set before this function is called or else it will error
	 *
	 * Input: $userid: the userid that initiated the file import. Used for reporting.
	 * Input: $filepath: the path of the file to import
	 * Input: $filename: the name of the file to import. Should not include the filepath
	 *
	 * Returns: True if there are no errors. False if there is an error that prevents the upload from continuing.
	 * The number of errors if there were errors that did not prevent the upload from continuing (ie: with specific records).
	 *
	 * TODO: remove $userid parameter from upload function. We should be able to use the currently logged in user - even if the import is being done from a CLI cron job.
	 */
	public function upload($userid, $filepath, $filename) {
		$this->user_id = $userid;

		// Double-check that the reporter has been set
		if(is_null($this->reporter) || get_class($this->reporter) != 'IttImportModelReporter') {
			JError::raiseError(500, JText::_('COM_ITTIMPORT_UPLOAD_REPORTER_NOT_SET'));
			return false;
		}

		//Make sure that we can actually access the file
		if(($handle = fopen($filepath, 'r')) === false) {
			JError::raiseWarning(404, JText::_('COM_ITTIMPORT_UPLOAD_FAILED_FILE_EMPTY'));
			return false;
		}

		//And make sure that the file appears to be a validly formatted CSV file
		$headers = fgetcsv($handle,1000,',');
		$numcols = count($headers);
		if($numcols < count($this->fields)) {
			JError::raiseWarning(404, JText::_('COM_ITTIMPORT_UPLOAD_FAILED_NOT_ENOUGH_COLUMNS'));
			return false;
		}

		// Now we can start recording the upload with the reporter
		$this->reporter->startUpload($this->user_id, $filename);
		$errored = 0;

		//Iterate through each row in the spreadsheet
		while(($data = fgetcsv($handle, 1000, ',')) !== false) {
			if(count($data) != $numcols) {
				$this->reporter->recordEvent('','','errored',JText::_('COM_ITTIMPORT_UPLOAD_FAILED_WRONG_COLUMN_NUMBER'));
				$errored++;
				continue;
			}

			//convert the data into an object based on the header rows
			$record = new stdClass();
			foreach($headers as $idx => $field) {
				$field = strtolower($field);
				if(isset($this->fields[$field])) {
					$myfield = $this->fields[$field];
					$record->$myfield = $data[$idx];
				}
			}

			//Perform any necessary transformations, validations, and/or operations on the record
			$result = $this->prepareRecord($record);
			if(!$result || is_string($result)) {
				$person_id = isset($record->person_id)?$record->person_id:'';
				$course = isset($record->course)?$record->course:'';
				$this->reporter->recordEvent($person_id,$course,'errored',JText::sprintf('COM_ITTIMPORT_FAILED_PREPARATION', $result));
				$errored++;
				continue;
			} else {
				$record = $result;
			}

			//Now the record is ready to process. This function is where orders should be created/modified from the record
			$result = $this->processRecord($record);
			//Let's log the result of our record processing
			if(!is_array($result)) {
				$this->reporter->recordEvent($record->person_id, $record->course, 'errored', $result);
				$errored++;
			} else {
				$details = isset($result['details'])?$result['details']:'';
				$this->reporter->recordEvent($record->person_id, $record->course, $result['status'], $details);
				$this->{$result['status']}++;
			}
		}

		// Return the number of errors encountered during the upload
		return ($errored == 0)?true:$errored;
	}


	/*
	 * prepareRecord function. Performs any modifications necessary to prepare
	 * the record for the database. Verifies that the elements are corerct.
	 *
	 * Input: $record: The record to be modified/verified
	 *
	 * Returns: Basic PHP object containing the event on success, string containing an error message if any of the elements are not valid
	 *
	 */
	private function prepareRecord($record) {
		$newrecord = new stdClass();

		//iterate through the record fields, performing transformations as necessary, and validating the format
		foreach($this->fields as $value) {
			$transformfunction = $value.'_transform';
			$validatefunction = $value.'_validate';
			if(method_exists($this,$transformfunction)) {
				$newrecord->$value = $this->$transformfunction($record->$value);
			} else {
				$newrecord->$value = $record->$value;
			}
			if(method_exists($this,$validatefunction) && !empty($newrecord->$value) && !$this->$validatefunction($newrecord->$value)) {
				return JText::sprintf('COM_ITTIMPORT_'.strtoupper($value).'_INVALID',$record->$value);
			}
		}

		//now add the elements that we can find but that are not in the XML file
		//starting with the user_id of the given student
		$result = $this->getStudentId($newrecord);
		if(!$result || is_string($result)) {
			return $result;
		}
		$newrecord->studentid = $result;
		//now lets get the relevant product IDs for the course
		$result = $this->getProductIds($newrecord->course);
		if(!is_array($result)) {
			return $result;
		}
		$newrecord->productids = $result;
		//and we need to fetch any existing orders for this user and these products
		$result = $this->getOrders($newrecord);
		if(!is_array($result)) {
			return $result;
		}
		$newrecord->orders = $result;

		//we're done. Let's return the prepared record
		return $newrecord;
	}

	/*
	 * getStudentId function: Fetch the joomla user_id for a student, creating the user if they do not already exist. User is created with a random password.
	 *
	 * Input: $record: The record including the student's person_id, email address and name
	 *
	 * Returns: The user_id on success, string containing an error message on failure
	 *
	 */
	private function getStudentId($record) {
		if(!array_key_exists($record->person_id,$this->jusers)) {
			$query = 'SELECT id FROM #__users WHERE username='.$this->_db->quote($record->person_id);
			$this->_db->setQuery($query);
			$this->_db->query();
			$numrows = $this->_db->getAffectedRows();
			if($numrows == 1) {
				$this->jusers[$record->person_id] = (int) $this->_db->loadResult();
			} elseif ($numrows == 0) {
				$nameparts = array();
				if(!empty($record->firstname)) $nameparts[] = $record->firstname;
				if(!empty($record->middlename)) $nameparts[] = $record->middlename;
				if(!empty($record->lastname)) $nameparts[] = $record->lastname;
				$data = array(
					'name' => implode(' ',$nameparts),
					'username' => $record->person_id,
					'usertype' => 'Registered',
					'email' => $record->email,
					'groups' => $this->getDefaultUserGroup(),
				);
				$newuser = new JUser;
				if($newuser->bind($data) && $newuser->save()) {
					$this->jusers[$record->person_id] = $newuser->id;
				} else {
					$this->jusers[$record->person_id] = $newuser->getError();
				}
			} else {
				JError::raiseWarning(404, JText::_('COM_ITTIMPORT_LOAD_STUDENT_FAILED_TOO_MANY_ROWS'));
				$this->jusers[$record->person_id] = JText::_('COM_ITTIMPORT_LOAD_STUDENT_FAILED_TOO_MANY_ROWS');
			}
		}
		return $this->jusers[$record->person_id];
	}

	/*
	 * getDefaultUserGroup function: Helper function to fetch the default Joomla user group
	 *
	 * Returns: Array containing the default joomla usergroup (this is the format required by the JUser object)
	 *
	 */
	private function getDefaultUserGroup() {
		if(!isset($this->newusergroup)) {
			jimport('joomla.application.component.helper');
			$users_config = JComponentHelper::getParams('com_users');
			$this->newusergroup = array($users_config->get('new_usertype',2));
		}
		return $this->newusergroup;
	}

	/*
	 * getProductIds function: Fetches all of the product IDs for a given course.
	 *
	 * Input: $course (string): The course code for the ITT Books course.
	 *
	 * Returns: an array containing the IDs of all of the products for the given course - array may be empty.
	 */
	private function getProductIds($course) {
		//caching the course products for cheap improved performance
		if(!array_key_exists($course, $this->products)) {
			$query = 'SELECT virtuemart_product_id FROM #__virtuemart_products_en_gb WHERE product_name LIKE '.$this->_db->quote('%'.$course.'%');
			$this->_db->setQuery($query);
			$this->_db->query();
			if($this->_db->getErrorMsg()) {
				return $this->_db->getErrorMsg();
			}
			$this->products[$course] = $this->_db->loadResultArray();
		}
		return $this->products[$course];
	}

	/*
	 * getOrders function: fetch all of the relevant VirtueMart orders for the given record.
	 *
	 * Input: $record: The record you are fetching orders for.
	 *
	 * Returns an associative array of virtuemart order objects for the given record. The keys should be the product IDs for each order.
	 *  - If there are no products for this record, or no existing orders for the products, return an empty array
	 *  - It is possible to have fewer orders than products (eg: A student received a product for a previous course)
	 * Return an error string if you encounter any errors.
	 */
	private function getOrders($record) {
		if(empty($record->studentid)) return 'no user';
		if(!is_array($record->productids)) return 'invalid products array';
		if(empty($record->productids)) return array();

		$orders = array();
		//Only orders with the following statuses should be returned:
		//Waiting for approval, duplicate, pending, ready to be shipped, and invalid address
		$acceptable_statuses = array('M'=>'"M"','D'=>'"D"','P'=>'"P"','C'=>'"C"','A'=>'"A"');

		if(!class_exists( 'VmConfig' )) require JPATH_ADMINISTRATOR.'/components/com_virtuemart/helpers/config.php';
		if(!class_exists('VirtueMartModelOrders')) require(JPATH_VM_ADMINISTRATOR.'/models/orders.php');
		$orderModel = VmModel::getModel('orders');

		$tmporders = array();
		$sql = 'SELECT o.*,i.virtuemart_product_id
			  FROM #__virtuemart_orders o
			  JOIN #__virtuemart_order_items i ON i.virtuemart_order_id=o.virtuemart_order_id
			 WHERE o.order_status IN ('.implode(',',$acceptable_statuses).')
			   AND o.virtuemart_user_id='.$this->_db->quote($record->studentid).'
			   AND i.virtuemart_product_id IN ('.implode(',',$record->productids).')
			 GROUP BY o.virtuemart_order_id
			 ORDER BY o.virtuemart_order_id DESC';
		$this->_db->setQuery($sql);
		$rows = $this->_db->loadObjectList();
		foreach($rows as $row) {
			$tmporders[$row->virtuemart_product_id][] = $row;
		}

		foreach($tmporders as $k=>$rorders) {
			if(count($rorders)==1) {
				$orders[$k] = $orderModel->getOrder($rorders[0]->virtuemart_order_id);
			} else {
				return "Multiple pending orders exist for this person and product. Please cancel one of these orders and request a manager to manually update the other.";
			}
		}
		return $orders;
	}


	/*
	 * processRecord function: creates/updates the VirtueMart user (student), and creates/modifies VirtueMart orders for a given record.
	 * This function is the workhorse of the component.
	 *
	 * Input: $record: The record you are processing
	 *
	 * Returns an array containing the status and details of the processing, or a string containing an error message on failure.
	 *
	 */
	private function processRecord($record) {
		if(!is_object($record)) {
			return 'Failed to process record. Record is not an object: '.var_export($record,true);
		}
		$has_error = false;
		$details = array();

		//The first thing we should do is make sure that the VirtueMart user is up-to-date
		//If this is successful, the virtueMart user should be accessible from the record in later functions.
		$result = $this->fetchVirtuemartUser($record);
		if(!$result || is_string($result)) {
			return $result;
		} else {
			$record->vmuser = $result;
		}

		if($record->cancelled) {
			//code to handle if the student is cancelling their order(s)
			$recordstatus = 'skipped';
			foreach($record->orders as $order) {
				if(($result = $this->cancelOrder($order)) !== true) {
					$details[] = $result;
					$recordstatus = 'errored';
					$has_error = true;
				} else {
					$details[] = 'Order with ID '.$order-id.' has been cancelled';
					$recordstatus='cancelled';
				}
			}
			if($recordstatus=='skipped') {
				$details[] = 'Did not find any orders to cancel. Skipping';
			}
		} elseif(empty($record->productids)) {
			$recordstatus = 'skipped';
			$details[] = 'No products are associated with this course.';
		} else {
			$statuses = array();

			//iterate through all of the products
			foreach($record->productids as $productid) {

				//if there is already an order for this product, update it
				if(isset($record->orders[$productid])) {
					$order = $record->orders[$productid];
					$statuses[] = 'updated';
					$result = $this->updateOrder($order, $record);
					if(!$result || is_string($result)) {
						$details[] = 'Failed to update order with ID '.$order['details']['BT']->virtuemart_order_id.': '.$result;
						$has_error = true;
					} else {
						$details[] = 'Updated order with ID '.$order['details']['BT']->virtuemart_order_id;
					}
				} else {
					//there is not a relevant order for the current product. Create one
					$statuses[] = 'added'; //we are creating a new order. Change the record status for the log to 'added'
					$neworder = $this->createOrder($record, $productid);
					if(!$neworder || is_string($neworder)) {
						$statusdetail ='Failed to create order: '.$neworder;
						$details[] = $statusdetail;
						$has_error = true;
					} else {
						$statusdetail = 'Created order with ID '.$neworder['details']['BT']->virtuemart_order_id;
						if($neworder['details']['BT']->order_status == 'D') {
							$statusdetail .= ' (duplicate order)';
						} elseif($neworder['details']['BT']->order_status == 'A') {
							$statusdetail .= ' (invalid address)';
						} elseif($neworder['details']['BT']->order_status == 'M') {
							$statusdetail .= ' (requires manager approval)';
						}
						$details[] = $statusdetail;
					}
				}
			}

			//if we created any new orders, the status should be added
			if(in_array('added',$statuses)) {
				$recordstatus = 'added';
			} elseif(in_array('updated',$statuses)) {
				$recordstatus = 'updated';
			} else {
				$recordstatus = $statuses[0];
			}
		}

		if($has_error) {
			return implode("\n",$details);
		} else {
			return array('status'=>$recordstatus, 'details'=>implode("\n",$details));
		}
	}

	/* private function getCourseStartDate($string) {
		$has_csd = preg_match('/\[\[COURSE_START_DATE\: (\d{2}\/\d{2}\/\d{4})\]\]/',$string,$match);
		return ($has_csd)?$match[1]:'';
	} */

	private function saveCourseStartDate($startdate, &$string) {
		$has_csd = preg_match('/\[\[COURSE_START_DATE\: (\d{2}\/\d{2}\/\d{4})\]\]/', $string, $match);
		if($has_csd) {
			$newdate = date('m/d/Y',strtotime($startdate));
			if($newdate != $match[1]) {
				$string = str_replace($match[0],"[[COURSE_START_DATE: $newdate]]",$string);
			}
		} elseif(empty($string)) {
			$string = '[[COURSE_START_DATE: '.date('m/d/Y',strtotime($startdate)).']]';
		} else {
			$string .= "<br />\n".'[[COURSE_START_DATE: '.date('m/d/Y',strtotime($startdate)).']]';
		}
	}

	/* private function getCourseID($string) {
		$has_course = preg_match('/\[\[COURSE_NUMBER\: ([A-Za-z0-9 ]*)\]\]/',$string,$match);
		return ($has_course)?$match[1]:'';
	} */

	private function saveCourseId($course, &$string) {
		if(strpos($string, "[[COURSE_NUMBER: $course]]") === false) {
			if(empty($string)) {
				$string = "[[COURSE_NUMBER: $course]]";
			} else {
				$string .= "<br />\n[[COURSE_NUMBER: $course]]";
			}
		}
	}

	/*
	 * fetchVirtuemartUser function: returns the virtuemart user for the given record.
	 * Creates the VM user if they do not exist.
	 * Updates the VM user if they do exist and their details have changed
	 *
	 * Input: $record: The record containing the user information, including the joomla user_id
	 * Of particular interest for this function:
	 * 		$record->studentid should contain the Joomla user_id
	 * 		$record->firstname
	 * 		$record->middlename
	 * 		$record->lastname
	 * 		$record->address1
	 * 		$record->address2
	 * 		$record->address3
	 * 		$record->city
	 * 		$record->state
	 * 		$record->zip
	 * 		$record->country
	 * 		$record->phone
	 * 		$record->email
	 *
	 * Return the Virtuemart user on success, a string containing an error message on failure
	 */
	private function fetchVirtuemartUser($record) {
		if (!class_exists( 'VmConfig' )) require JPATH_ADMINISTRATOR.'/components/com_virtuemart/helpers/config.php';
		if (!class_exists('VirtuemartModelUser')) require(JPATH_VM_ADMINISTRATOR . DS . 'models' . DS . 'user.php');
		$vmusermodel = new VirtuemartModelUser();
		$vmusermodel->_id = $record->studentid;

		$usercountry = $this->get_country_id_from_code($record->country);
		$userstate = $this->get_state_id_from_code($usercountry, $record->state);

		$addressparts = array();
		if(!empty($record->address2)) $addressparts[] = trim($record->address2);
		if(!empty($record->address3)) $addressparts[] = trim($record->address3);
		$storedata = array();
		$storedata['virtuemart_user_id'] = $record->studentid;
		if($record->person_id) $storedata['username'] = $record->person_id;
		if($record->email) $storedata['email'] = $record->email;
		if($record->firstname) $storedata['first_name'] = $record->firstname;
		if($record->middlename) $storedata['middle_name'] = $record->middlename;
		if($record->lastname) $storedata['last_name'] = $record->lastname;
		if($record->address1) $storedata['address_1'] = $record->address1;
		if(!empty($addressparts)) $storedata['address_2'] = implode(' ',$addressparts);
		if($record->zip) $storedata['zip'] = $record->zip;
		if($record->city) $storedata['city'] = $record->city;
		if($usercountry) $storedata['virtuemart_country_id'] = $usercountry;
		if($userstate) $storedata['virtuemart_state_id'] = $userstate;
		$storedata['address_type'] = 'BT';
		if($record->phone) $storedata['phone_1'] = $record->phone;

		if(!$vmusermodel->saveUserData($storedata)) {
			return JText::sprintf('COM_ITTIMPORT_VIRTUEMART_USER_SAVE_FAILURE', $vmusermodel->getError());
		}
		$vmusermodel->storeAddress($storedata);

		return $vmusermodel->getUser();
	}

	private function get_country_id_from_code($code) {
		if(empty($this->vcountries)) {
			$this->_db->setQuery('SELECT virtuemart_country_id, country_3_code, country_2_code, country_name FROM #__virtuemart_countries WHERE published=1');
			$rows = $this->_db->loadAssocList();
			foreach($rows as $row) {
				$this->vcountries[strtoupper($row['country_name'])] = $row['virtuemart_country_id'];
				$this->vcountries[$row['country_2_code']] = $row['virtuemart_country_id'];
				$this->vcountries[$row['country_3_code']] = $row['virtuemart_country_id'];
			}
			//force the United States to be the default country (if no country is specified)
			$this->vcountries[''] = $this->vcountries['USA'];
		}
		if(!isset($this->vcountries[$code])) {
			$this->vcountries[$code] = false;
		}
		return $this->vcountries[$code];
	}

	private function get_state_id_from_code($country, $code) {
		if(!$country) return false;
		if(empty($this->vstates)) {
			$this->_db->setQuery('SELECT virtuemart_state_id, virtuemart_country_id, state_2_code, state_3_code, state_name FROM #__virtuemart_states WHERE published=1');
			$rows = $this->_db->loadAssocList();
			foreach($rows as $row) {
				$this->vstates[$row['virtuemart_country_id']][strtoupper($row['state_name'])] = $row['virtuemart_state_id'];
				$this->vstates[$row['virtuemart_country_id']][$row['state_2_code']] = $row['virtuemart_state_id'];
				$this->vstates[$row['virtuemart_country_id']][$row['state_3_code']] = $row['virtuemart_state_id'];
			}
		}
		if(!isset($this->vstates[$country]) || !isset($this->vstates[$country][$code])) {
			$this->vstates[$country][$code] = false;
		}
		return $this->vstates[$country][$code];
	}

	/*
	 * createOrder function: Creates an order for the given record and product.
	 * We do not need to worry about the order status, since that is taken care of in the payment plugin
	 *
	 * Input: $record: The record from which to fetch information about the order to be created
	 * Input: $productid: The Virtuemart product ID to create the order for
	 *
	 * Return the new order object on success, or a string containing an error message on failure
	 */
	private function createOrder($record, $productid) {
		if(empty($record->vmuser)) return 'Virtuemart User needed';

		$session = JFactory::getSession();
		$session->set('user',JFactory::getUser($record->studentid));

		if(!class_exists('VmConfig')) require JPATH_ADMINISTRATOR.'/components/com_virtuemart/helpers/config.php';
		if(!class_exists('VirtueMartCart')) require(JPATH_VM_SITE.'/helpers/cart.php');
		if(!class_exists('VirtueMartModelOrders')) require(JPATH_VM_ADMINISTRATOR.'/models/orders.php');
		$cart = VirtueMartCart::getCart();
		$cart->emptyCart();

		$err = '';
		$_REQUEST['quantity'][0] = 1;
		if (!$cart->add(array($productid),$err)) return $err;

		foreach($record->vmuser->userInfo as $address) {
			if ($address->address_type == 'BT') {
				$cart->saveAddressInCart((array) $address, $address->address_type,false);
			}
		}

		$cart->tosAccepted = 1;
		$cart_prices = $cart->getCartPrices(true);
		$cart->CheckAutomaticSelectedPayment($cart_prices,true);
		$cart->CheckAutomaticSelectedShipment($cart_prices,true);
		//$cart->setShipment($virtuemart_shipmentmethod_id);
		//$cart->setPaymentMethod($virtuemart_paymentmethod_id);
		$cart->setCartIntoSession();
		$cart->customer_comment = '';
		$this->saveCourseStartDate($record->course_start_date, $cart->customer_comment);
		$this->saveCourseId($record->course, $cart->customer_comment);

		$orderModel = VmModel::getModel('orders');
		if (($orderID = $orderModel->createOrderFromCart($cart)) === false) {
			JError::raiseWarning(500, 'No order created '.$orderModel->getError());
			return 'No order created '.$orderModel->getError();
		}
		$order= $orderModel->getOrder($orderID);

		$dispatcher = JDispatcher::getInstance();
		JPluginHelper::importPlugin('vmshipment');
		JPluginHelper::importPlugin('vmcustom');
		JPluginHelper::importPlugin('vmpayment');
		JPluginHelper::importPlugin('vmcalculation');

		ob_start();
		$returnValues = $dispatcher->trigger('plgVmConfirmedOrder', array($cart, $order));
		ob_end_clean();

		$session->set('user',JFactory::getUser($this->user_id));
		return $order;
	}

	/*
	 * cancelOrder function: Cancels the given order in Virtuemart
	 *
	 * Input: $order: The order to be cancelled
	 *
	 * Return true on success, or a string containing an error message on failure
	 *
	 */
	private function cancelOrder($order) {
		return $this->updateOrderStatus($order,'X');
	}

	/*
	 * updateOrder function: Updates the given order in Virtuemart. DO NOT update the order status as that is taken care of in the payment plugin
	 *
	 * Input: $order: The order to be updated
	 * Input: $record: The record containing the new information with which to update the order (will not have to change the product on the order)
	 *
	 * Return true on success or a string containing an error message on failure
	 */
	private function updateOrder($order, $record) {
		if(empty($order['details']['BT']->virtuemart_order_id)) return 'Invalid Order';

		$virtuemart_country_id = $this->get_country_id_from_code($record->country);
		$virtuemart_state_id = $this->get_state_id_from_code($virtuemart_country_id, $record->state);

		$addressparts = array();
		if(!empty($record->address2)) $addressparts[] = trim($record->address2);
		if(!empty($record->address3)) $addressparts[] = trim($record->address3);

		$updatefields = array();
		if(!empty($record->email)) $updatefields['email'] = $record->email;
		if(!empty($record->firstname)) $updatefields['first_name'] = $record->firstname;
		if(!empty($record->middlename)) $updatefields['middle_name'] = $record->middlename;
		if(!empty($record->lastname)) $updatefields['last_name'] = $record->lastname;
		$updatefields['address_1'] = $record->address1;
		if(!empty($addressparts)) $updatefields['address_2'] = implode(' ',$addressparts);
		$updatefields['zip'] = $record->zip;
		$updatefields['city'] = $record->city;
		if(!empty($record->phone)) $updatefields['phone_1'] = $record->phone;
		if($virtuemart_country_id) $updatefields['virtuemart_country_id'] = $virtuemart_country_id;
		if($virtuemart_state_id) $updatefields['virtuemart_state_id'] = $virtuemart_state_id;

		$updateparts = array();
		foreach($updatefields as $key => $value) {
			$updateparts[] = $key.' = '.$this->_db->quote($value);
		}

		$sql = 'UPDATE #__virtuemart_order_userinfos SET '.implode(', ',$updateparts)
			  .' WHERE virtuemart_order_id='.$order['details']['BT']->virtuemart_order_id.' AND address_type="BT"';//printrx($sql);
		$this->_db->setQuery($sql);
		$this->_db->query();
		if($error = $this->_db->getErrorMsg()) {
			return $error;
		}

		return true;
	}

	/*
	 * updateOrderStatus Function: Updates the status on the given order.
	 *
	 * Input: $order - The order to update the status for
	 * Input: $order_status - The status code to update the order with (ie: P,C,S,R)
	 *
	 * Return true on success, or a string containing an error message on failure
	 */
	private function updateOrderStatus($order, $order_status) {
		if(empty($order['details']['BT']->virtuemart_order_id)) return 'Invalid Order';

		if(!class_exists( 'VmConfig' )) require JPATH_ADMINISTRATOR.'/components/com_virtuemart/helpers/config.php';
		if(!class_exists('VirtueMartModelOrders')) require(JPATH_VM_ADMINISTRATOR.'/models/orders.php');
		$orderModel = VmModel::getModel('orders');

		return $orderModel->updateStatusForOneOrder($order['details']['BT']->virtuemart_order_id,array('order_status'=>$order_status,'customer_notified'=>0));
	}






	/*
	 * Begin the field transformation and validation functions
	 *
	 * If no transformation function is present for a field, it will not be transformed
	 * If no validation function is present for a field, it will not be validated
	 *
	 * For transform functions, return the transformed value
	 * For validate functions, return true if the value is valid or false if it is invalid
	 *
	 */

	private function person_id_validate($value) {
		return preg_match('/^[0-9]{6,8}$/', $value);
	}
	private function phone_transform($value) {
		return str_replace(array(' ','-','/','\\',')','('), '', $value);
	}
	private function phone_validate($value) {
		return preg_match('/^[0-9]{10,11}$/', $value);
	}
	private function email_validate($value) {
		return (filter_var($value, FILTER_VALIDATE_EMAIL) !== FALSE);
	}
	private function country_transform($value) {
		return strtoupper($value);
	}
	private function country_validate($value) {
		return preg_match('/^([A-Z]{2,3}|[A-Z]{3,15}( [A-Z]{2,15}){0,6})$/',$value);
	}
	private function state_transform($value) {
		return strtoupper($value);
	}
	private function state_validate($value) {
		return preg_match('/^([A-Z]{2,3}|[A-Z]{3,15}( [A-Z]{2,15}){0,6})$/',$value);
	}
	private function course_start_date_transform($value) {
		return $this->itt_date_transform($value);
	}
	private function course_start_date_validate($value) {
		return preg_match('/^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])\/201[3-9]$/', $value);
	}
	private function cancelled_transform($value) {
		return (trim($value)==false)?'0':'1';
	}
	private function ordered_on_transform($value) {
		return $this->itt_date_transform($value);
	}
	private function ordered_on_validate($value) {
		return preg_match('/^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])\/201[3-9]$/', $value);
	}

	//Transform dates from the format '1-APR-13' to '04/01/2013'
	private function itt_date_transform($value) {
		$dateparts = explode('-',$value);
		$day = str_pad($dateparts[0],2,'0',STR_PAD_LEFT);
		$month = $dateparts[1];
		$monthnames = array('JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC');
		$monthnums = array('01','02','03','04','05','06','07','08','09','10','11','12');
		$month = str_pad(str_replace($monthnames,$monthnums,$month),2,'0',STR_PAD_LEFT);
		$year = (strlen($dateparts[2])==2)?'20'.$dateparts[2]:$dateparts[2];
		return $month.'/'.$day.'/'.$year;
	}
}
